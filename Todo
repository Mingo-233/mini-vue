# 这里分解每个动作，或者模块要做的内容

## patchProps 更新属性流程
1. 编写调试样例
    - 属性变更情况
    - 属性删除情况
    - 属性重新赋值新对象的情况
2. patchProps方法
    - 对比新旧属性，进行更新
    - 删除旧属性
3. 改造core-dom中的hostPatchProps方法
    - 传入新旧属性，新值设置
    - 对于旧值，若为无效值，则移除属性
    
### element 更新流程搭建
1. setup中会返回响应式数据，对返回值进行解包操作
2. render函数放入effect环境，进行依赖收集
3. 组件实例
    - 添加isMounted标记，来区分首次还是更新。
    - 添加subTree属性，来记录old vnode数据
4. 组件处理环境中，加入新旧节点传参数
5. setupRenderEffect 处理mount 和 update逻辑   


### createRenderer 自定义渲染实现
1. 原先针对dom的操作封装一层抽象层，runtime-dom.
    - runtime-core createRender
    - createElement patchProp insert
2. 包装createApp
3. 实现canvas平台的渲染器 example/customRenderer/App.js

### inject和provide实现
pre 调试样例准备
1. 创建组件实例的时候，新增provides属性，和记录父组件实例
2. 组件处理的周期中，加入父组件的传递
3. 创建inject和provide方法
    - inject方法，获取父组件的provides属性，继承并创建新的对象
    - provide方法中，去除父组件中的provides的值。
        - 如有赋值默认值的函数，执行
4. 入口文件中导出

### getCurrentInstance实现
pre 调试样例准备
1. 定义 getCurrentInstance 和 setCurrentInstance方法
2. 在setup中的执行
3. 入口文件抛出

### Fragment和Text类型
pre 调试样例准备
1. 在vnode中定义Fragment,和Text symbol类型
2. createTextVNode方法
3. 新的类型2个处理函数 processText和processFragment
4. patch过程中，针对新的2个类型做处理 
5. 原先slots 方法中，使用createTextVNode