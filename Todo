# 这里分解每个动作，或者模块要做的内容
## nexttick实现
问题背景：
假设在同步代码中反复多次变化一个响应式数据，那么每次变化都会触发一次试图更新，这是很浪费的。
理想的情况是，响应式数据变化在同步代码中先全部执行，视图变化，即effect函数放入后面执行。那怎么放到后面执行呢？创建微任务，异步执行

1. effect 传入scheduler，来手动控制 响应式变化导致的副作用函数执行时机。因为不传scheduler的话，默认响应式变化一次，effect会立即触发
2. 创建queueJobs队列概念
    - 具备加入功能，但不能重复加入已在队列中的任务
    - 队列中创建异步任务去执行队列任务 flushJobs
    - 增加队列执行优化queueFlush，已有异步任务执行时，不重复创建异步任务
3. 将更新函数传入队列中
4. 新增nextTick函数，其作用是将传入的函数放入微任务中执行



## 组件更新逻辑
1. 在组件实例上增加next属性，这个值表示下次更新的vnode数据
2. 组件的实例代理对象上，新增$props公共属性
3. 增加辅助函数shouldUpdateComponent(prevVNode, nextVNode)，用于判断是否需要执行更新组件的逻辑
    - 判断条件是，2个vnode中的props是否相同
4. vnode 节点上增加component组件实例属性
5. processComponent过程中增加判断分支，生成组件和更新组件
6. updateComponent 函数实现
    - 如果本次要更新组件的，更新当前实例的next属性，执行组件effect函数，render生成新的vnode
    - 如果不更新组件。。。。
7. 在新的effect函数中，要增加updateComponentPreRender流程
    - 因为要进行新节点的render，所以要先把nextVnode的数据赋值给当前instance的vnode，然后将当前实例的next置为null
    - instance的props也要更新


## patchKeyedChildren 5.0 
中间对比-创建新的
在新老索引的映射表newIndexToOldIndexMap中的值为0，即初始值，表示新节点在老的里面不存在，则需要创建新的

## patchKeyedChildren 4.0 
中间对比-移动 节点存在于新的和老的里面，但是位置边了
c1: a,b,(c,d,e),f,g
c2: a,b,(e,c,d),f,g
这个情况，c1的里面cde的索引是 2,3,4. 而在c2里面的时，原先的节点变成了4,2,3. 2,3保持稳定增长，所以c,d是一个稳定序列，最省性能的操作是移动e。
在中间对比的节点中，e,c,d 的索引为:0,1,2
而4,2,3中得出的最长上升子序列为[1,2]
所以只要一一判断，比如索引0在不在[1,2]中，不在，说明要移动；1在不在[1,2]中，存在，说明不用移动

code：
1. 先构建一个新老索引的映射表newIndexToOldIndexMap ，并进行初始值赋值（这里每位 赋值0）
2. 在新节点必然存在的判断逻辑中，进行映射表赋值。 这里赋值可能是为0，但是这个和初始值的0有冲突，所以赋值全部额外+1
 newIndexToOldIndexMap  数组的索引为新节点的索引，value为这个同节点在老节点c1中的的索引
3. 映射表准备好之后，生成最长上升子序列。
4. 用2个指针去遍历，判断是否需要移动。一个指针指向toBePatched，一个指针指向最长上升子序列
  - 这里的判断条件是，toBePatched的索引在最长上升子序列中，如果在，说明不需要移动，toBePatched++
5. insertBefore的机制带来的问题，如果是正序遍历，假设e，c都需要移动，但是e先移动，可是e插入的时候c还没移动，后续要要移动，此时的移动旧不准确了。
所以，可以采取倒叙的方式，从后面先移动，这样保证每次在x之前插入的x，都是移动完的，稳定的节点。
6. 增加是否需要移动的标记moved，来提升性能，减少不必要的最长上升子序列生成和比较逻辑。 
   移动标记的判断，由处理的节点是否一直保持升序。newIndex，maxNewIndexSoFar。 如果newIndex 小于maxNewIndexSoFar，说明有需要移动

## patchKeyedChildren 3.0 
中间对比-删除旧节点
c1: a,b,(c,d),f,g
c2: a,b,(e,c),f,g
这里d在新节点中是不存在的，所以要删除处理。那么怎么知道它在新节点中不存在呢？有2个方法：
    1. 是通过遍历去找，没有key的情况，时间复杂度是o(n)
    2. 通过建立一个hashmap索引，map的key为vnode的key，value为vnode。时间复杂度是o(1)

优化点：
    - 如果新节点已经全部处理完了，但是老节点还有点多，那么这些老节点可以直接进行移除操作
    - toBePatched 需要更新的新节点数量。
    - patched 当前已经处理更新的数量


## patchKeyedChildren 2.0 
双端比较，就是快速缩小比较范围
1.其中左侧比较
c1: (a b) c
c2: (a b) d e
三个指针： i 位于a的位置索引，e1为c位置索引，e2为e位置索引。
循环从头开始比较，直到遇到不同的节点为止。所以得出成立判断逻辑为：i<=e1 && i<=e2,作i++

2.右侧比较
c1: a (b c)
c2: d e (b c)
三个指针： i 位于a的位置索引，e1为a位置索引，e2为e位置索引。
循环从尾部开始比较，直到遇到不同的节点为止。所以得出成立判断逻辑为：i<=e1 && i<=e2，作e--


3.新的比老的长-左侧比较
c1: (a b) 
c2: (a b) c 
三个指针： i 位于c的位置索引2，e1索引为1，e2索引为2。
这里是要框选有区别的位置，所以i在c位置，e1在b，e2在c。此时得出成立的判断逻辑为：i>e1,且i<=e2

4.新的比老的长-右侧比较
c1: (a b) 
c2: c (a b)  
三个指针： i 位于c的位置索引0，e1索引为-1，e2索引为0。
这里是要框选有区别的位置，所以i在c位置，e1在b，e2在c。此时得出成立的判断逻辑为：i>e1,且i<=e2
这里需要找到anchor，新节点插入到anchor前面。辅助变量nextPos

5.老的比新的长-左侧
c1: (a b) c
c2: (a b)  
三个指针： i 位于c的位置索引2，e1索引为2，e2索引为1。此时得出成立的判断逻辑为： i<=e1 && i>e2

6.老的比新的长-右侧
c1: a (b c)
c2: (b c)
三个指针： i 位于a的位置索引0，e1索引为0，e2索引为-1。此时得出成立的判断逻辑为： i<=e1 && i>e2


## patchKeyedChildren 1.0
1. 增加vnode的key属性
2. 增加辅助函数isSomeVNodeType

## patchChild 更新流程 -text
1. 编写调试样例，text内容变化
2. runtime-dom新增 remove和setElementText方法
3. patchChild方法中，对比新旧节点，文字不同的情况下，更新文本内容
4. 旧节点文字，新节点数组的情况
5. 旧节点数组，新节点文本的情况


## patchProps 更新属性流程
1. 编写调试样例
    - 属性变更情况
    - 属性删除情况
    - 属性重新赋值新对象的情况
2. patchProps方法
    - 对比新旧属性，进行更新
    - 删除旧属性
3. 改造core-dom中的hostPatchProps方法
    - 传入新旧属性，新值设置
    - 对于旧值，若为无效值，则移除属性
    
### element 更新流程搭建
1. setup中会返回响应式数据，对返回值进行解包操作
2. render函数放入effect环境，进行依赖收集
3. 组件实例
    - 添加isMounted标记，来区分首次还是更新。
    - 添加subTree属性，来记录old vnode数据
4. 组件处理环境中，加入新旧节点传参数
5. setupRenderEffect 处理mount 和 update逻辑   


### createRenderer 自定义渲染实现
1. 原先针对dom的操作封装一层抽象层，runtime-dom.
    - runtime-core createRender
    - createElement patchProp insert
2. 包装createApp
3. 实现canvas平台的渲染器 example/customRenderer/App.js

### inject和provide实现
pre 调试样例准备
1. 创建组件实例的时候，新增provides属性，和记录父组件实例
2. 组件处理的周期中，加入父组件的传递
3. 创建inject和provide方法
    - inject方法，获取父组件的provides属性，继承并创建新的对象
    - provide方法中，去除父组件中的provides的值。
        - 如有赋值默认值的函数，执行
4. 入口文件中导出

### getCurrentInstance实现
pre 调试样例准备
1. 定义 getCurrentInstance 和 setCurrentInstance方法
2. 在setup中的执行
3. 入口文件抛出

### Fragment和Text类型
pre 调试样例准备
1. 在vnode中定义Fragment,和Text symbol类型
2. createTextVNode方法
3. 新的类型2个处理函数 processText和processFragment
4. patch过程中，针对新的2个类型做处理 
5. 原先slots 方法中，使用createTextVNode